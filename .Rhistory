devtools::install_github("vinayudyawer/ATT")
devtools::install_github("vinayudyawer/ATT")
devtools::install_github("vinayudyawer/ATT")
devtools::install_github("vinayudyawer/ATT")
devtools::install_github("vinayudyawer/ATT")
devtools::install_github("vinayudyawer/ATT")
example("HRSummary")
disp<-dispersalSummary(att)
att<-setupData(tagdata, taginfo, statinfo)
coa<-COA(att)
det<-detectionSummary(att)
dat
det
hr<-HRSummary(coa, CRS("+init=epsg:3577"))
hr
hr$p
hr$Overall
data<-read.csv(file.choose())
library(data.table)
data<-fread(file.choose())
data<-read.csv(file.choose())
head(data)
data<-read.csv(file.choose())
data
head(data)
imos<-read.csv(file.choose())
head(imos)
library(maptools)
spDistsN1()
spDistsN1
gzAzimuth()
gzAzimuth
library(ATT)
data(tagdata)
data(taginfo)
data(statinfo)
ATTdata<-setupData(tagdata,taginfo,statinfo)
detectionSummary(ATTdata)
a<-detectionSummary(ATTdata)
a$Overall
abacusPlot(ATTdata)
a$Subsetted
b<-dispersalSummary(ATTdata)
b
abacusPlot(ATTdata, facet = T)
library(glatos)
?`glatos-package`
read_glatos_detections()
read_glatos_detections
View(read_glatos_detections)
View(read_OTN_detections)
View(read_otn_detections)
head(statinfo)
head(data)
data(tagdata)
library(utils)
library(devltoos)
library(devtools)
use_data()
IMOSdata<-tagdata
head(IMOSdata)
use_data(IMOSdata)
VEMCOdata<-read.csv(file.choose())
head(IMOSdata)
vem<-read.csv(file.choose())
vem
library(data.table)
vem<-fread(file.choose())
vem<-read.csv(file.choose())
head(vem)
head(IMOSdata)
VEMCOdata<- tagdata %>%
transmute(Date.and.Time..UTC. = as.character(lubridate::ymd_hms(detection_timestamp)))
library(tidyverse)
library(lubridate)
VEMCOdata<- tagdata %>%
transmute(Date.and.Time..UTC. = as.character(lubridate::ymd_hms(detection_timestamp)))
head(VEMCOdata)
View(vem)
VEMCOdata<- tagdata %>%
transmute(Date.and.Time..UTC. = as.character(lubridate::ymd_hms(detection_timestamp)),
Receiver = receiver_name,
Transmitter = transmitter_id,
Transmitter.Name = NA,
Transmitter.Serial = tag_id,
Sensor.Value = sensor_value,
Sensor.Unit = sensor_unit,
Station.Name = station_name,
Latitude = latitude,
Longitude = longitude)
head(VEMCOdata)
use_data(VEMCOdata)
data(IMOSdata)
data(VEMCOdata)
head(VEMCOdata)
source
if(source)
(source)
#' ## Import example datasets
#' data(tagdata)
#' data(taginfo)
#' data(statinfo)
#'
#' ## Setup data
#' ATTdata<- setupData(Tag.Detections = tagdata, Tag.Metadata = taginfo, Station.Information = statinfo)
#' ATTdata
#'
#'
setupData<-function(Tag.Detections, Tag.Metadata, Station.Information, source=NULL, tz="UTC", crs=NULL){
if(is.null(source))
stop("Can't recognize the source of your tag detection data.
\nsource should be either 'IMOS' or 'VEMCO'")
object<-
structure(
list(
if(source %in% "IMOS"){
Tag.Detections = as_tibble(Tag.Detections) %>%
transmute(Date.Time = lubridate::ymd_hms(detection_timestamp, tz=tz),
Tag.ID = tag_id,
Transmitter.Name = transmitter_id,
Station.Name = station_name,
Receiver = receiver_name,
Latitude = latitude,
Longitude = longitude,
Sensor.Value = sensor_value,
Sensor.Unit = sensor_unit)}
if(source %in% "VEMCO"){
Tag.Detections = as_tibble(Tag.Detections) %>%
transmute(Date.Time = lubridate::ymd_hms(Date.and.Time..UTC., tz=tz),
Transmitter = Transmitter,
Station.Name = Station.Name,
Receiver = Receiver,
Latitude = Latitude,
Longitude = Longitude,
Sensor.Value = Sensor.Value,
Sensor.Unit = Sensor.Unit)},
Tag.Metadata = as_tibble(Tag.Metadata) %>%
transmute(Tag.ID = tag_id,
Sci.Name = scientific_name,
Common.Name = common_name,
Tag.Project = tag_project_name,
Release.Latitude = release_latitude,
Release.Longitude = release_longitude,
Release.Date = lubridate::date(ymd_hms(taginfo$ReleaseDate, tz=tz)),
Tag.Life = tag_expected_life_time_days,
Tag.Status = tag_status,
Sex = sex,
Bio = measurement),
Station.Information = as_tibble(Station.Information) %>%
transmute(Station.Name = station_name,
Receiver = receiver_name,
Installation = installation_name,
Receiver.Project = project_name,
Deployment.Date = lubridate::ymd_hms(deploymentdatetime_timestamp, tz=tz),
Recovery.Date = lubridate::ymd_hms(recoverydatetime_timestamp, tz=tz),
Station.Latitude = station_latitude,
Station.Longitude = station_longitude,
Receiver.Status = status)),
class="ATT")
if(inherits(crs, "CRS")){
attr(object, "CRS")<-crs
}else{
message("Geographic projection for detection positions not recognised, reverting to WGS84 global coordinate reference system")
attr(object, "CRS")<-CRS("+init=epsg:4326")
}
return(object)
}
#' ## Import example datasets
#' data(tagdata)
#' data(taginfo)
#' data(statinfo)
#'
#' ## Setup data
#' ATTdata<- setupData(Tag.Detections = tagdata, Tag.Metadata = taginfo, Station.Information = statinfo)
#' ATTdata
#'
#'
setupData<-function(Tag.Detections, Tag.Metadata, Station.Information, source=NULL, tz="UTC", crs=NULL){
if(is.null(source))
stop("Can't recognize the source of your tag detection data.
\nsource should be either 'IMOS' or 'VEMCO'")
if(source %in% "IMOS"){
Tag.Detections = as_tibble(Tag.Detections) %>%
transmute(Date.Time = lubridate::ymd_hms(detection_timestamp, tz=tz),
Tag.ID = tag_id,
Transmitter.Name = transmitter_id,
Station.Name = station_name,
Receiver = receiver_name,
Latitude = latitude,
Longitude = longitude,
Sensor.Value = sensor_value,
Sensor.Unit = sensor_unit)}
if(source %in% "VEMCO"){
Tag.Detections = as_tibble(Tag.Detections) %>%
transmute(Date.Time = lubridate::ymd_hms(Date.and.Time..UTC., tz=tz),
Transmitter = Transmitter,
Station.Name = Station.Name,
Receiver = Receiver,
Latitude = Latitude,
Longitude = Longitude,
Sensor.Value = Sensor.Value,
Sensor.Unit = Sensor.Unit)}
object<-
structure(
list(
Tag.Detections,
Tag.Metadata = as_tibble(Tag.Metadata) %>%
transmute(Tag.ID = tag_id,
Sci.Name = scientific_name,
Common.Name = common_name,
Tag.Project = tag_project_name,
Release.Latitude = release_latitude,
Release.Longitude = release_longitude,
Release.Date = lubridate::date(ymd_hms(taginfo$ReleaseDate, tz=tz)),
Tag.Life = tag_expected_life_time_days,
Tag.Status = tag_status,
Sex = sex,
Bio = measurement),
Station.Information = as_tibble(Station.Information) %>%
transmute(Station.Name = station_name,
Receiver = receiver_name,
Installation = installation_name,
Receiver.Project = project_name,
Deployment.Date = lubridate::ymd_hms(deploymentdatetime_timestamp, tz=tz),
Recovery.Date = lubridate::ymd_hms(recoverydatetime_timestamp, tz=tz),
Station.Latitude = station_latitude,
Station.Longitude = station_longitude,
Receiver.Status = status)),
class="ATT")
if(inherits(crs, "CRS")){
attr(object, "CRS")<-crs
}else{
message("Geographic projection for detection positions not recognised, reverting to WGS84 global coordinate reference system")
attr(object, "CRS")<-CRS("+init=epsg:4326")
}
return(object)
}
setupData(VEMCOdata, taginfo, statinfo, source="VEMCO")
data(taginfo)
data(statinfo)
setupData(VEMCOdata, taginfo, statinfo, source="VEMCO")
library(sp)
?CRS
setupData(VEMCOdata, taginfo, statinfo, source="VEMCO")
#' ## Import example datasets
#' data(tagdata)
#' data(taginfo)
#' data(statinfo)
#'
#' ## Setup data
#' ATTdata<- setupData(Tag.Detections = tagdata, Tag.Metadata = taginfo, Station.Information = statinfo)
#' ATTdata
#'
#'
setupData<-function(Tag.Detections, Tag.Metadata, Station.Information, source=NULL, tz="UTC", crs=NULL){
if(is.null(source))
stop("Can't recognize the source of your tag detection data.
\nsource should be either 'IMOS' or 'VEMCO'")
if(source %in% "IMOS"){
Tag.Detections = as_tibble(Tag.Detections) %>%
transmute(Date.Time = lubridate::ymd_hms(detection_timestamp, tz=tz),
Tag.ID = tag_id,
Transmitter.Name = transmitter_id,
Station.Name = station_name,
Receiver = receiver_name,
Latitude = latitude,
Longitude = longitude,
Sensor.Value = sensor_value,
Sensor.Unit = sensor_unit)}
if(source %in% "VEMCO"){
Tag.Detections = as_tibble(Tag.Detections) %>%
transmute(Date.Time = lubridate::ymd_hms(Date.and.Time..UTC., tz=tz),
Transmitter = Transmitter,
Station.Name = Station.Name,
Receiver = Receiver,
Latitude = Latitude,
Longitude = Longitude,
Sensor.Value = Sensor.Value,
Sensor.Unit = Sensor.Unit)}
object<-
structure(
list(
Tag.Detections = Tag.Detections,
Tag.Metadata = as_tibble(Tag.Metadata) %>%
transmute(Tag.ID = tag_id,
Sci.Name = scientific_name,
Common.Name = common_name,
Tag.Project = tag_project_name,
Release.Latitude = release_latitude,
Release.Longitude = release_longitude,
Release.Date = lubridate::date(ymd_hms(taginfo$ReleaseDate, tz=tz)),
Tag.Life = tag_expected_life_time_days,
Tag.Status = tag_status,
Sex = sex,
Bio = measurement),
Station.Information = as_tibble(Station.Information) %>%
transmute(Station.Name = station_name,
Receiver = receiver_name,
Installation = installation_name,
Receiver.Project = project_name,
Deployment.Date = lubridate::ymd_hms(deploymentdatetime_timestamp, tz=tz),
Recovery.Date = lubridate::ymd_hms(recoverydatetime_timestamp, tz=tz),
Station.Latitude = station_latitude,
Station.Longitude = station_longitude,
Receiver.Status = status)),
class="ATT")
if(inherits(crs, "CRS")){
attr(object, "CRS")<-crs
}else{
message("Geographic projection for detection positions not recognised, reverting to WGS84 global coordinate reference system")
attr(object, "CRS")<-CRS("+init=epsg:4326")
}
return(object)
}
setupData(VEMCOdata, taginfo, statinfo, source="VEMCO")
setupData(IMOSdata, taginfo, statinfo, source="VEMCO")
setupData(IMOSdata, taginfo, statinfo, source="IMOS")
head(IMOSdata)
taginfo
install_github("vinayudyawer/ATT")
install_github("vinayudyawer/ATT")
data("IMOSdata")
ATTdata<-setupData(IMOSdata, taginfo, statinfo)
library(ATT)
data("IMOSdata")
data("taginfo")
data("statinfo")
ATTdata<-setupData(IMOSdata, taginfo, statinfo)
ATTdata<-setupData(IMOSdata, taginfo, statinfo, source="VEMCO")
ATTdata<-setupData(IMOSdata, taginfo, statinfo, source="IMOS")
ATTdata
abacusPlot(ATTdata)
install_github("vinayudyawer/ATT")
devtools::install_github("vinayudyawer/ATT")
library(ATT)
ATTdata<-setupData(IMOSdata, taginfo, statinfo, source="IMOS")
abacusPlot(ATTdata)
devtools::install_github("vinayudyawer/ATT")
library(ATT)
data("statinfo")
data("taginfo")
data("IMOSdata")
ATTdata<-setupData(IMOSdata, taginfo, statinfo, source="IMOS")
ATTdata
abacusPlot(ATTdata)
devtools::install_github("vinayudyawer/ATT")
library(ATT)
data("statinfo")
data("taginfo")
data("IMOSdata")
ATTdata<-setupData(IMOSdata, taginfo, statinfo, source="IMOS")
abacusPlot(ATTdata)
abacusPlot(ATTdata, facet=T)
library(ATT)
data(IMOSdata)
head(data)
head(IMOSdata)
head(VEMCOdata)
head(data(VEMCOdata))
data(VEMCOdata)
a<-setupData(VEMCOdata, taginfo, statinfo)
a<-setupData(VEMCOdata, taginfo, statinfo, source="VEMCO")
data(taginfo)
data(statinfo)
a<-setupData(VEMCOdata, taginfo, statinfo, source="VEMCO")
a
abacusPlot(a)
b<-detectionSummary(a)
b<-dispersalSummary(a)
b
b<-detectionSummary(a)
detectionSummary
devtools::install_github("vinayudyawer/ATT")
library(ATT)
b<-detectionSummary(a)
b
b$Overall
b
c<-dispersalSummary
c
c<-dispersalSummary(a)
c
coa<-COA(a)
coa
hr<-HRSummary(coa)
hr<-HRSummary(coa, projCRS=CRS("+init=epsg:3577"))
hr
hr$Overall
library(ATT)
example("dispersalSummary")
dispSum
library(ATT)
example(setupData)
head(IMOSdata)
ATTdata$Station.Information
head(statinfo)
table(statinfo$status)
library(ATT)
data(IMOSdata)  ## Detection data exported from IMOS data repository
data(VEMCOdata) ## Detection data exported from a VUE database
data(taginfo)
data(statinfo)
## Setup data for use with the Animal Tracking Toolbox
ATTdata<- setupData(Tag.Detections = IMOSdata,
Tag.Metadata = taginfo,
Station.Information = statinfo,
source="IMOS")
head(ATTdata$Tag.Detections)
ATTdata$Tag.Detections
ATTdata$Tag.Metadata
ATTdata$Station.Information
######################################
### Abacus Plot (might be incomplete as animals were tagged in 2017 and tags end in 2022)
abacusPlot(ATTdata, tag.col=1)
dev.off()
######################################
### Calculate dispersal metrics
### ** Might take some time because of volume of data **
dispSum<-dispersalSummary(ATTdata)
class(dispSum)
dispSum
######################################
## Calculating activity space metrics
## Estimate COAs
COAdata<-COA(ATTdata,
timestep = 60) ## 60 min COA timesteps
View(COAdata)
proj<-CRS("+init=epsg:3297") ## projection for French Polynesia (http://spatialreference.org/ref/epsg/3297/)
### ** Might take some time because of volume of data **
fkud <- HRSummary(COAdata,
projCRS = proj,
# h = 50,             ## inaccuracy of relocation (in meters)
type = "fKUD",      ## fixed KUD, Change to 'BBKUD' for Brownian bridge KUD, but that will take a lot more time!
cont = c(50, 95),   ## KUD contours
storepoly = TRUE)   ## store the outputs for overall and subsetted KUDs as polygons/rasters
fKud
fkud
fkud
KUDest<-fkud
### ** Might take some time because of volume of data **
kud <- HRSummary(COAdata,
projCRS = proj,
# h = 50,             ## inaccuracy of relocation (in meters)
type = "fKUD",      ## fixed KUD, Change to 'BBKUD' for Brownian bridge KUD, but that will take a lot more time!
cont = c(50, 95),   ## KUD contours
storepoly = F)   ## store the outputs for overall and subsetted KUDs as polygons/rasters
kud
length(kud)
if(kud$Spatial.Objects)
``
(is.null(kud$Spatial.Objects))
(is.finite(kud$Spatial.Objects))
(is.null(kud$Spatial.Objects))
(is.null(fkud$Spatial.Objects))
(!is.null(fkud$Spatial.Objects))
is.null(KUDest$Spatial.Objects)
KUDest$Spatial.Objects
is.null(KUDest$Spatial.Objects)
kud
KUDest
KUDest<-kud
KUDest$Spatial.Objects
is.null(KUDest$Spatial.Objects)
unlist(KUDest$Spatial.Objects)
KUDest<-fkud
unlist(KUDest$Spatial.Objects)
grep("*_full", names(unlist(KUDest$Spatial.Objects)))
unlist(KUDest$Spatial.Objects)[grep("*_full", names(unlist(KUDest$Spatial.Objects)))]
plotstack<-unlist(KUDest$Spatial.Objects)[grep("*_full", names(unlist(KUDest$Spatial.Objects)))]
names(plotstack)<-unlist(lapply(strsplit(names(plotstack), "[.]"), `[[`, 1))
plotstack
class(plotstack)
plotstack
stack(plotstack)
unlist(plotstack)
plotstack[[]]
plotstack[]
plotstack[1]
plotstack[[1]]
stack(plotstack[[1]],plotstack[[2]]
)
stack(plotstack[[1]],plotstack[[2]])
raster::stack(plotstack[[1]],plotstack[[2]])
plot(plotack[[1]])
plot(plotsack[[1]])
plot(plotstack[[1]])
plot(plotstack[[1]]>95)
plot(plotstack[[1]]<95)
plot(plotstack[[1]]>95)
plot(plotstack[[1]]<100)
plot(plotstack[[1]]<95)
library(mapview)
mapview(plotstack[[1]]<95)
mapviewOptions()
mapview(plotstack[[1]]<95, na.color=NA)
pp<-plotstack[[1]]
values(pp)
values(pp)[values(pp)>95]
values(pp)[values(pp)>95]<-NA
plot(pp)
pp<-disaggregate(plotstack[[1]], fact=3, 'bilinear')
pp
plot(pp)
values(pp)[values(pp)>95]<-NA
mapview(pp, na.color=NA)
pp<-disaggregate(plotstack[[1]], fact=5, 'bilinear')
values(pp)[values(pp)>95]<-NA
?mapview(pp, na.color=NA, fillOpacity=0.2)
mapview(pp, na.color=NA, alpha.regions=0.5)
require(rworldmap)
require(rworldxtra)
KUDest
